security:
    encoders:
        App\Entity\Adherent:
            algorithm: bcrypt
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        in_database: 
            entity:
                class: App\Entity\Adherent
                property: mail

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        apiLogin:
            pattern:  ^/apiPlatform/login_check
            stateless: true
            json_login: # or form_login
                username_path: mail
                password_path: password
                provider: in_database    #or your custom user provider 
                check_path: /apiPlatform/login_check  #same as the configured route
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false
        api:
            pattern:   ^/apiPlatform              # protected path
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
                    

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/apiPlatform/login_check, roles: PUBLIC_ACCESS }
         - { path: ^/apiPlatform, roles: IS_AUTHENTICATED_FULLY }

    role_hierarchy:
        ROLE_MANAGER: ROLE_ADHERENT
        ROLE_ADMIN: ROLE_MANAGER
         

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
